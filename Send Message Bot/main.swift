//
//  main.swift
//  Send Message Bot
//
//  Created by Anton Nagornyi on 5.3.25..
//

import Foundation

func sendMessage(token: String, chatId: Int, text: String) {
    let urlString = "https://api.telegram.org/bot\(token)/sendMessage"
    var urlComponents = URLComponents(string: urlString)!
    urlComponents.queryItems = [
        URLQueryItem(name: "chat_id", value: "\(chatId)"),
        URLQueryItem(name: "text", value: text)
    ]
    
    guard let url = urlComponents.url else {
//        print("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL")
        return
    }
    
    let task = URLSession.shared.dataTask(with: url) { data, response, error in
        if let error = error {
//            print("–û—à–∏–±–∫–∞: \(error.localizedDescription)")
            return
        }
        if let data = data, let responseString = String(data: data, encoding: .utf8) {
//            print("–û—Ç–≤–µ—Ç API: \(responseString)")
        }
    }
    task.resume()
}
//// –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏:
let token = "7691790161:AAEYGFJE6t1Qcmlh-GKwBrZ7zHtvKTpdnmI"
let chatId = 298645304

func fetchData(completion: @escaping (Result<String, Error>) -> Void) {
    let url = URL(string: "https://search.tw1.ru/api.php")!
    var request = URLRequest(url: url)
    request.httpMethod = "POST"
    request.setValue("application/json", forHTTPHeaderField: "Content-Type")

    // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    let requestBody: [String: Any] = [
        "key": "ecTR4mutvKXwLLq6wwmJDvdqCQbxvOm3OjKLMlI63wa7UKoaVT6JF2WGd6ZGMsV6"
    ]

    request.httpBody = try? JSONSerialization.data(withJSONObject: requestBody, options: [])

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    let task = URLSession.shared.dataTask(with: request) { data, response, error in
        if let error = error {
            completion(.failure(error))
            return
        }

        guard let data = data else {
            completion(.failure(NSError(domain: "No data", code: -1, userInfo: nil)))
            return
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
        let responseString = String(data: data, encoding: .utf8) ?? "–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏"
        
        completion(.success(responseString))
            
    }

    task.resume()
}

struct Location: Equatable {
    var lat: Double
    var lon: Double
    var power: Int
    var timestamp: String
}

func parseLocations(from jsonString: String) -> [Location]? {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ Data
    guard let data = jsonString.data(using: .utf8) else { return nil }
    
    do {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –≤ —Å–ª–æ–≤–∞—Ä—å
        if let json = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any],
           let dataArray = json["DATA"] as? [[String: Any]] {
            
            var locations: [Location] = []
            
            // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ "DATA"
            for locationData in dataArray {
                if let latString = locationData["lat"] as? String,
                   let lonString = locationData["lon"] as? String,
                   let powerString = locationData["power"] as? String,
                   let timestamp = locationData["timestamp"] as? String {
                    
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
                    if let lat = Double(latString),
                       let lon = Double(lonString),
                       let power = Int(powerString) {
                        let location = Location(lat: lat, lon: lon, power: power, timestamp: timestamp)
                        locations.append(location)
                    }
                }
            }
            return locations
        }
    } catch {
//        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON: \(error.localizedDescription)")
    }
    
    return nil
}

var locationsArray = [Location]()

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
var lastUpdateTime: Date? = nil
var lastBattery = 0
var battery20 = false
var battery10 = false
var battery5 = false
var sheIsLost = false
var backOnline = false
// –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
var updateTimer: Timer?

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
func updateLocations() {
    fetchData { result in
        switch result {
        case .success(let response):
            let newLocations = parseLocations(from: response) ?? []
            
            checkIfDataUnchanged()
                
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if newLocations != locationsArray {
                locationsArray = newLocations
//                checkIfDataUnchanged()
                lastUpdateTime = Date() // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                lastBattery = locationsArray[0].power
                if lastBattery > 20 {
                    battery5 = false
                    battery10 = false
                    battery20 = false
                }
                if lastBattery <= 5 && !battery5 {
                    battery5 = true
                    sendMessage(token: token, chatId: chatId, text: """
                    –û–Ω–∞ —Ç–∞–∫ –∏ –Ω–µ –¥–æ–±—Ä–∞–ª–∞—Å—å –¥–æ –∑–∞—Ä—è–¥–∫–∏ü§¶üèª‚Äç‚ôÇÔ∏è
                    –°–µ–π—á–∞—Å \(lastBattery)%
                    
                    –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω–∞ —Ç—É—Ç
                    https://maps.google.com/?q=\(locationsArray[0].lat),\(locationsArray[0].lon)
                    """)
                } else if lastBattery <= 10 && !battery10 {
                    battery10 = true
                    sendMessage(token: token, chatId: chatId, text: """
                    –ù–∞–¥–µ—é—Å—å –æ–Ω–∞ —Å–∫–æ—Ä–æ –ø–æ—Å—Ç–∞–≤–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞ –∑–∞—Ä—è–¥–∫—Éüòï
                    –°–µ–π—á–∞—Å —Ç–∞–º \(lastBattery)%
                    
                    –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω–∞ —Ç—É—Ç
                    https://maps.google.com/?q=\(locationsArray[0].lat),\(locationsArray[0].lon)
                    """)
                } else if lastBattery <= 20 && !battery20 {
                    battery20 = true
                    sendMessage(token: token, chatId: chatId, text: """
                    –¢–∞–∫! –£ –ñ–µ–Ω–∏ —Å–∫–æ—Ä–æ —Å—è–¥–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω.
                    –°–µ–π—á–∞—Å —Ç–∞–º \(lastBattery)%
                    
                    –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω–∞ —Ç—É—Ç
                    https://maps.google.com/?q=\(locationsArray[0].lat),\(locationsArray[0].lon)
                    """)
                }
//                print("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
//                for loc in locationsArray {
//                    print(loc)
//                    print("---")
//                }
            }

        case .failure(let error):
//            print("–û—à–∏–±–∫–∞: \(error.localizedDescription)")
        }
    }
}

func stringToDate(_ dateString: String) -> Date? {
    let dateFormatter = DateFormatter()
    dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
    dateFormatter.timeZone = TimeZone(identifier: "UTC") // –£–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É

    return dateFormatter.date(from: dateString)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
func checkIfDataUnchanged() {
    
    guard !locationsArray.isEmpty && lastUpdateTime != nil else {return}
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 5 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    let timeDifference = Date().timeIntervalSince(lastUpdateTime!)
//    print("timeDifference \(timeDifference)")
    let lastDate = stringToDate(locationsArray[0].timestamp)
    let nextDate = stringToDate(locationsArray[1].timestamp)
    let firtToSecondDifference = nextDate!.timeIntervalSince(lastDate!)
//    print("firtToSecondDifference - \(firtToSecondDifference)")
    
    if timeDifference >= 300 && !sheIsLost { // 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
        // –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç
        sheIsLost = true
        sendMessage(token: token, chatId: chatId, text: """
                    –ü–ò–ó–î–ï–¶!!! –í–°–Å –ü–†–û–ü–ê–õ–û!!!! –ú–´ –ï–Å –ü–û–¢–ï–†–Ø–õ–ò!!!!
                    –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –±—ã–ª–æ \(lastBattery)%
                    
                    –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –µ—ë –≤–∏–¥–µ–ª–∏ —Ç—É—Ç!!!
                    https://maps.google.com/?q=\(locationsArray[0].lat),\(locationsArray[0].lon)
                    """)
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        lastUpdateTime = Date()
    } else {
        sheIsLost = false
        if firtToSecondDifference <= -300 && !backOnline {
            backOnline = true
            sendMessage(token: token, chatId: chatId, text: """
                        –û–Ω–∞ —Å–Ω–æ–≤–∞ –æ–Ω–ª–∞–π–Ω!
                        –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ —Å–µ–π—á–∞—Å \(lastBattery)%
                        
                        –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω–∞ —Ç—É—Ç
                        https://maps.google.com/?q=\(locationsArray[0].lat),\(locationsArray[0].lon)
                        """)
        } else if firtToSecondDifference > -300 {
            backOnline = false
        }
    }
//    print("lastUpdateTime \(lastUpdateTime)")
}

updateLocations()

// –¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ locationsArray –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
updateTimer = Timer.scheduledTimer(withTimeInterval: 5.0, repeats: true) { _ in
    updateLocations()
//    print("updateLocations")
//    checkIfDataUnchanged()
//    print("checkIfDataUnchanged")
    

}

// –ó–∞–ø—É—Å–∫–∞–µ–º RunLoop –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ç–∞–π–º–µ—Ä–∞
RunLoop.current.run()

